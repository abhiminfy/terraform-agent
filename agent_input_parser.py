import os
import re
import shutil
import subprocess
from pathlib import Path

import google.generativeai as genai
from dotenv import load_dotenv

# ---------- helper: check CLI exists ----------
def require_executable(name: str) -> None:
    if shutil.which(name) is None:
        raise RuntimeError(
            f"❌ Required executable '{name}' was not found on PATH. "
            f"Please install {name} and restart the application."
        )

# ---------- 1. highlight placeholders ----------
def highlight_placeholders(terraform_code: str) -> str:
    substitutions = {
        r'ami\s*=\s*".+?"': 'ami = "ami-09ac0b140f63d3458"',
        r'username\s*=\s*".+?"': 'username = "adminuser"',
        r'password\s*=\s*".+?"': 'password = "MyS3cur3P@ssw0rd!"',
        r'db_name\s*=\s*".+?"': 'db_name = "<terraform-db-subnet-group>"',
        r'identifier\s*=\s*".+?"': 'identifier = "terraform-mysql-db"',
        r'key_name\s*=\s*".+?"': 'key_name = "terraform-key"',
        r'subnet_id\s*=\s*".+?"': 'subnet_id = "subnet-0be2812d720cb27e1"',
        r'vpc_security_group_ids\s*=\s*\[.+?\]': 'vpc_security_group_ids = ["sg-087ec30e65e4381af"]',
        r'availability_zone\s*=\s*".+?"': 'availability_zone = "us-east-1a"',
    }
    for pattern, replacement in substitutions.items():
        terraform_code = re.sub(pattern, replacement, terraform_code)
    return terraform_code

# ---------- 2. infracost estimate ----------
def estimate_infracost() -> str:
    print("\n🔍 Running Infracost estimate...")
    require_executable("terraform")
    require_executable("infracost")

    subprocess.run(["terraform", "init"], check=True)
    subprocess.run(["terraform", "plan", "-out=tfplan.binary"], check=True)
    subprocess.run(["terraform", "show", "-json", "tfplan.binary"], stdout=open("tfplan.json", "w"), check=True)

    result = subprocess.run(
        ["infracost", "breakdown", "--path=tfplan.json", "--format=table"],
        capture_output=True,
        text=True,
        check=True
    )
    print(result.stdout)
    return result.stdout  # This can be returned to display in UI

# ---------- 3. push to GitHub ----------
def push_to_github() -> None:
    print("\n🚀 Pushing generated code to GitHub...")
    require_executable("git")

    github_token = os.getenv("GITHUB_TOKEN")
    github_repo = os.getenv("GITHUB_REPO")
    if not github_token or not github_repo:
        raise RuntimeError("❌ Missing GITHUB_TOKEN or GITHUB_REPO in .env")

    repo_url = f"https://{github_token}@github.com/{github_repo}.git"

    if not Path(".git").exists():
        subprocess.run(["git", "init"], check=True)
        subprocess.run(["git", "remote", "add", "origin", repo_url], check=True)
    else:
        subprocess.run(["git", "remote", "set-url", "origin", repo_url], check=True)

    subprocess.run(["git", "add", "."], check=True)
    subprocess.run(["git", "commit", "-m", "Auto-push: Terraform code generated by AI"], check=True)
    subprocess.run(["git", "branch", "-M", "main"], check=True)
    subprocess.run(["git", "push", "-u", "origin", "main"], check=True)

    print("✅ Code pushed successfully.")

# ---------- 4. load env ----------
print("🔧 Loading environment variables...")
load_dotenv()

API_KEY = os.getenv("GOOGLE_API_KEY")
if not API_KEY:
    raise RuntimeError("❌ Missing GOOGLE_API_KEY in your .env file.")

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro")

# ---------- 5. main entry ----------
def parse_user_input(user_prompt: str) -> tuple[str, str]:
    system_prompt = (
        "You are an AI DevOps assistant. Generate strictly-valid HCL Terraform code. "
        "Do NOT include infracost provider, CLI commands, or markdown formatting. "
        "Respond only with pure Terraform (HCL) resources."
    )

    # clean previous state
    for f in Path(".").glob(".terraform*"):
        shutil.rmtree(f, ignore_errors=True) if f.is_dir() else f.unlink(missing_ok=True)
    for f in ("terraform.tfstate", "terraform.tfstate.backup", "main.tf", "generated.tf", "tfplan.binary", "tfplan.json"):
        Path(f).unlink(missing_ok=True)

    require_executable("terraform")
    require_executable("infracost")
    require_executable("git")

    try:
        response = model.generate_content([{"role": "user", "parts": [system_prompt + "\n" + user_prompt]}])
        raw_code = response.text

        raw_code = re.sub(r"```(?:terraform|hcl)?\n(.*?)```", r"\1", raw_code, flags=re.DOTALL)
        raw_code = raw_code.split("```")[0].strip()
        cleaned_code = highlight_placeholders(raw_code)

        Path("main.tf").write_text(cleaned_code, encoding="utf-8")

        cost_table = estimate_infracost()
        push_to_github()

        return cleaned_code, cost_table

    except Exception as e:
        raise RuntimeError(str(e))
